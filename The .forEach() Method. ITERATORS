//.forEach() will execute the same code for each element of an array.

Const groceries = [‘brown sugar’, ‘salt’, ‘cranberries’, ‘walnuts’];

Groceries.forEach(function(groceryItem) {
Console.log(‘ - ‘ + groceryItem); 
});

//The code above will log a nicely formatted list of the groceries to the console. 
//Let's explore the syntax of invoking .forEach().
//	-	groceries.forEach() calls the forEach method on the groceries array.
//	-	.forEach() takes an argument of callback function. 
//Remember, a callback function is a function passed as an argument into another function.
//	-	.forEach() loops through the array and executes the callback function for each element. 
//During each execution, the current element is passed as an argument to the callback function.
//	-	The return value for .forEach() will always be undefined.

//Another way to pass a callback for .forEach() is to use arrow function syntax.

groceries.forEach(groceryItem => 
console.log(groceryItem));

//We can also define a function beforehand to be used as the callback function.

function printGrocery(element){
  console.log(element);
}

groceries.forEach(printGrocery);


//Iterate over the fruits array to log I want to eat a plus the name of each fruit to the console. 
//For example, I want to eat a mango.
//You may use any form of callback you prefer.

const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

fruits.forEach(function(fruitItem){
  console.log('I want to eat a ' + fruitItem);
});

// output: 
// I want to eat a mango
// I want to eat a papaya
// I want to eat a pineapple
// I want to eat a apple
